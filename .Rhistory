priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
print("Resultat regression ", simpleLinearRegression(ramList[i]))
print("Expected ", priceList[i])
print("Checking ", checking(priceList[i], simpleLinearRegression(ramList[i])))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)-1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
print(simpleLinearRegression(ramList[i]))
print(priceList[i])
print(checking(priceList[i], simpleLinearRegression(ramList[i])))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)-1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
print("NewOne")
print(simpleLinearRegression(ramList[i]))
print(priceList[i])
print(checking(priceList[i], simpleLinearRegression(ramList[i])))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)-1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
print("NewOne")
print(ramList[i])
print(simpleLinearRegression(ramList[i]))
print(priceList[i])
print(checking(priceList[i], simpleLinearRegression(ramList[i])))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
df <- data.frame(
group = c(0, 1, 2, 3),
value = c(sum(dataSet$price_range==0), sum(dataSet$price_range==1), sum(dataSet$price_range==2), sum(dataSet$price_range==3))
)
bp<- ggplot(df, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity")
bp
pie <- bp + coord_polar("y", start=0)
pie
fig(18, 16)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.80
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
install.packages("tidyverse")
install.packages("pacman")
install.packages("dplyr")
install.packages("plotly")
library(tidyverse)
install.packages("pacman")
install.packages("dplyr")
install.packages("plotly")
fig <- function(width, heigth){
options(repr.plot.width = width, repr.plot.height = heigth)
}
library(pacman)
pacman::p_load(pacman,dplyr, ggplot2, rio, gridExtra, scales, ggcorrplot, caret, e1071)
install.packages("plotly")
dataSet <- read.csv('data/train.csv')
library(e1071)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.80
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(dataSet)*percentage_of_data_for_training
m <- naiveBayes(extractDataFromDataSet[0:nbColumnForTraining,-3], extractDataFromDataSet[0:nbColumnForTraining,-ncol(dataSet)],eps = 1)
m <- naiveBayes(extractDataFromDataSet[0:nbColumnForTraining,-3], extractDataFromDataSet[0:nbColumnForTraining,-ncol(dataSet)],eps = 1)
abort
nbColumnForTraining <- nrow(dataSet)*percentage_of_data_for_training
print(nbColumnForTraining)
m <- naiveBayes(extractDataFromDataSet[0:nbColumnForTraining,-3], extractDataFromDataSet[0:nbColumnForTraining,-ncol(dataSet)],eps = 1)
percentage_of_data_for_training <- 0.20
m <- naiveBayes(extractDataFromDataSet[0:nbColumnForTraining,-3], extractDataFromDataSet[0:nbColumnForTraining,-ncol(dataSet)],eps = 1)
m <- naiveBayes(extractDataFromDataSet[0:nbColumnForTraining,-3], extractDataFromDataSet[0:nbColumnForTraining,-ncol(dataSet)],eps = 1)
m <- naiveBayes(
extractDataFromDataSet[0:250,-3],
extractDataFromDataSet[0:250,-ncol(dataSet)],
eps = 1)
extractDataFromDataSet <-  dataSet %>%select(1,7,21) # battery = 1 ,memory = 7
m <- naiveBayes(extractDataFromDataSet[0:250,-3], extractDataFromDataSet[0:250,3],eps = 1)
grzegrezsdc <- table(predict(m, extractDataFromDataSet[250:2000,]), extractDataFromDataSet[250:2000,3])
View(grzegrezsdc)
m <- naiveBayes(
extractDataFromDataSet[0:250,-3],
extractDataFromDataSet[0:250,3],
eps = 1)
m <- naiveBayes(
extractDataFromDataSet[0:nrow(dataSet)*percentage_of_data_for_training,-3],
extractDataFromDataSet[0:nrow(dataSet)*percentage_of_data_for_training,3],
eps = 1)
nbColumnForTraining <- nrow(dataSet)*percentage_of_data_for_training
print(nbColumnForTraining)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-3],
extractDataFromDataSet[0:nbColumnForTraining,3],
eps = 1)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-ncol(dataSet)],
extractDataFromDataSet[0:nbColumnForTraining,ncol(dataSet)],
eps = 1)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-ncol(dataSet)],
extractDataFromDataSet[0:nbColumnForTraining,ncol(dataSet)],
eps = 1)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,- ncol(dataSet)],
extractDataFromDataSet[0:nbColumnForTraining,ncol(dataSet)],
eps = 1)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-(ncol(dataSet))],
extractDataFromDataSet[0:nbColumnForTraining,ncol(dataSet)],
eps = 1)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-3],
extractDataFromDataSet[0:nbColumnForTraining,ncol(dataSet)],
eps = 1)
nbColumnForTraining <- nrow(dataSet)*percentage_of_data_for_training
print(nbColumnForTraining)
m <- naiveBayes(
extractDataFromDataSet[0:400,-ncol(dataSet)],
extractDataFromDataSet[0:400,ncol(dataSet)],
eps = 1)
m <- naiveBayes(
extractDataFromDataSet[0:250,-ncol(dataSet)],
extractDataFromDataSet[0:250,ncol(dataSet)],
eps = 1)
m <- naiveBayes(
extractDataFromDataSet[0:250,-3],
extractDataFromDataSet[0:250,ncol(dataSet)],
eps = 1)
m <- naiveBayes(
extractDataFromDataSet[0:250,-3],
extractDataFromDataSet[0:250,3],
eps = 1)
nbRowForTraining <- ncol(dataSet)
print(nbRowForTraining)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
3
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-3],
extractDataFromDataSet[0:nbColumnForTraining,3],
eps = 1)
print(nbRowForTraining)
nbRowForTraining <- ncol(dataSet)
print(nbRowForTraining)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
View(dataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
print(score)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
percentage_of_data_for_training <- 0.80
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
print(nbRowForTraining)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.90
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.99
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.75
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.70
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.70
extractDataFromDataSet <-  dataSet %>%select(1,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.70
extractDataFromDataSet <-  dataSet %>%select(14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.70
extractDataFromDataSet <-  dataSet %>%select(1,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.70
extractDataFromDataSet <-  dataSet %>%select(7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.70
extractDataFromDataSet <-  dataSet %>%select(1,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.70
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.80
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 1
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.80
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.90
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
library(MLmetrics)
percentage_of_data_for_training <- 0.90
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
nbColumnForTraining <- nrow(extractDataFromDataSet)*percentage_of_data_for_training
nbRowForTraining <- ncol(extractDataFromDataSet)
m <- naiveBayes(
extractDataFromDataSet[0:nbColumnForTraining,-nbRowForTraining],
extractDataFromDataSet[0:nbColumnForTraining,nbRowForTraining],
eps = 1)
pred_result <- predict(m, extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),])
true_result <- extractDataFromDataSet[nbColumnForTraining:nrow(extractDataFromDataSet),ncol(extractDataFromDataSet)]
score <- F1_Score(y_pred = pred_result, y_true = true_result)
print(score)
library(e1071)
# déclaration des données
data(iris)
# le modèle est calculé avec les valeurs
# par défaut des paramètres
# (noyau gaussien, pénalisation à 1, gamma=0,25)
model = svm(Species ~ ., data = iris)
print(model)
summary(model)
# prévision de l’échantillon d’apprentissage
pred = predict(model, iris[,1:4])
# Matrice de confusion pour l’échantillon
# d’apprentissage
table(pred, iris$Species)
# Visualisation des classes (couleurs)
# et des vecteurs supports ("+")
plot(cmdscale(dist(iris[,-5])),
col = as.integer(iris[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
print(model)
# le modèle est calculé avec les valeurs
# par défaut des paramètres
# (noyau gaussien, pénalisation à 1, gamma=0,25)
model = svm(rame_freq ~ ., data = extractDataFromDataSet)
# le modèle est calculé avec les valeurs
# par défaut des paramètres
# (noyau gaussien, pénalisation à 1, gamma=0,25)
model = svm(ram ~ ., data = extractDataFromDataSet)
print(model)
# déclaration des données
extractDataFromDataSet <-  dataSet %>%select(1,7,14,21)
# le modèle est calculé avec les valeurs
# par défaut des paramètres
# (noyau gaussien, pénalisation à 1, gamma=0,25)
model = svm(ram ~ ., data = extractDataFromDataSet)
print(model)
summary(model)
# prévision de l’échantillon d’apprentissage
pred = predict(model, extractDataFromDataSet[,-4])
# prévision de l’échantillon d’apprentissage
pred = predict(model, extractDataFromDataSet[,4])
# le modèle est calculé avec les valeurs
# par défaut des paramètres
# (noyau gaussien, pénalisation à 1, gamma=0,25)
model = svm(price_range ~ ., data = extractDataFromDataSet)
print(model)
summary(model)
# prévision de l’échantillon d’apprentissage
pred = predict(model, extractDataFromDataSet[,1:4])
# Matrice de confusion pour l’échantillon
# d’apprentissage
table(pred, extractDataFromDataSet$price_range)
# Visualisation des classes (couleurs)
# et des vecteurs supports ("+")
plot(cmdscale(dist(extractDataFromDataSet[,-5])),
col = as.integer(extractDataFromDataSet[,5]),
pch = c("o","+")[1:150 %in% model$index + 1])
# Visualisation des classes (couleurs)
# et des vecteurs supports ("+")
plot(cmdscale(dist(extractDataFromDataSet[,-4])),
col = as.integer(extractDataFromDataSet[,4]),
pch = c("o","+")[1:150 %in% model$index + 1])
library(e1071)
# déclaration des données
data(iris)
# le modèle est calculé avec les valeurs
# par défaut des paramètres
# (noyau gaussien, pénalisation à 1, gamma=0,25)
model = svm(price_range ~ ., data = extractDataFromDataSet)
print(model)
summary(model)
# prévision de l’échantillon d’apprentissage
pred = predict(model, extractDataFromDataSet[,1:4])
# Matrice de confusion pour l’échantillon
# d’apprentissage
table(pred, extractDataFromDataSet$price_range)
# Visualisation des classes (couleurs)
# et des vecteurs supports ("+")
plot(cmdscale(dist(extractDataFromDataSet[,-4])),
col = as.integer(extractDataFromDataSet[,4]),
pch = c("o","+")[1:150 %in% model$index + 1])
