#grid.arrange(p4,nrow = 1)
fig(24, 20)
firstQuantile <- quantile(dataSet$battery_power, 0.25)
thirdQuantile <- quantile(dataSet$battery_power, 0.75)
#IQR
battery_powerIQR <- dataSet %>% filter(battery_power > firstQuantile && battery_power < thirdQuantile)
battery_powerIQR
p4 <- ggplot(dataSet, aes(x=price_range, y = battery_powerIQR, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR battery power vs Price Range")
#grid.arrange(p4,nrow = 1)
fig(24, 20)
firstQuantile <- quantile(dataSet$battery_power, 0.25)
thirdQuantile <- quantile(dataSet$battery_power, 0.75)
#IQR
battery_powerIQR <- dataSet %>% filter(dataSet$battery_power > firstQuantile && dataSet$battery_power < thirdQuantile)
battery_powerIQR
p4 <- ggplot(dataSet, aes(x=price_range, y = battery_powerIQR, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR battery power vs Price Range")
#grid.arrange(p4,nrow = 1)
fig(24, 20)
View(df)
View(battery_powerIQR)
firstQuantile <- quantile(dataSet$battery_power, 0.25)
thirdQuantile <- quantile(dataSet$battery_power, 0.75)
#IQR
battery_powerIQR <- dataSet %>% filter(dataSet$battery_power > firstQuantile && dataSet$battery_power < thirdQuantile)
battery_powerIQR
p4 <- ggplot(battery_powerIQR, aes(x=price_range, y = battery_power, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR battery power vs Price Range")
grid.arrange(p4,nrow = 1)
fig(24, 20)
firstQuantile <- quantile(dataSet$battery_power, 0.25)
thirdQuantile <- quantile(dataSet$battery_power, 0.75)
#IQR
battery_powerIQR <- dataSet %>% filter(dataSet$battery_power > firstQuantile & dataSet$battery_power < thirdQuantile)
battery_powerIQR
p4 <- ggplot(battery_powerIQR, aes(x=price_range, y = battery_power, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR battery power vs Price Range")
grid.arrange(p4,nrow = 1)
fig(24, 20)
#Battery_power IQR
firstQuantile <- quantile(dataSet$battery_power, 0.25)
thirdQuantile <- quantile(dataSet$battery_power, 0.75)
battery_powerIQR <- dataSet %>% filter(dataSet$battery_power > firstQuantile & dataSet$battery_power < thirdQuantile)
#Int Memory IQR
firstQuantile <- quantile(dataSet$int_memory , 0.25)
thirdQuantile <- quantile(dataSet$int_memory, 0.75)
int_memoryIQR <- dataSet %>% filter(dataSet$int_memory > firstQuantile & dataSet$int_memory < thirdQuantile)
p3 <- ggplot(int_memoryIQR, aes(x=price_range, y = int_memory, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR int memory vs Price Range")
p4 <- ggplot(battery_powerIQR, aes(x=price_range, y = battery_power, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR battery power vs Price Range")
grid.arrange(p3, p4,nrow = 1)
fig(24, 20)
#Battery_power IQR
firstQuantile <- quantile(dataSet$battery_power, 0.25)
thirdQuantile <- quantile(dataSet$battery_power, 0.75)
battery_powerIQR <- dataSet %>% filter(dataSet$battery_power > firstQuantile & dataSet$battery_power < thirdQuantile)
#Int Memory IQR
firstQuantile <- quantile(dataSet$int_memory , 0.25)
thirdQuantile <- quantile(dataSet$int_memory, 0.75)
int_memoryIQR <- dataSet %>% filter(dataSet$int_memory > firstQuantile & dataSet$int_memory < thirdQuantile)
#ram IQR
firstQuantile <- quantile(dataSet$ram , 0.25)
thirdQuantile <- quantile(dataSet$ram, 0.75)
ramIQR <- dataSet %>% filter(dataSet$ram > firstQuantile & dataSet$ram < thirdQuantile)
p2 <- ggplot(ramIQR, aes(x=price_range, y = ram, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR RAM vs Price Range")
p3 <- ggplot(int_memoryIQR, aes(x=price_range, y = int_memory, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR int memory vs Price Range")
p4 <- ggplot(battery_powerIQR, aes(x=price_range, y = battery_power, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR battery power vs Price Range")
grid.arrange(p3, p4,nrow = 1)
fig(24, 20)
#Battery_power IQR
firstQuantile <- quantile(dataSet$battery_power, 0.25)
thirdQuantile <- quantile(dataSet$battery_power, 0.75)
battery_powerIQR <- dataSet %>% filter(dataSet$battery_power > firstQuantile & dataSet$battery_power < thirdQuantile)
#Int Memory IQR
firstQuantile <- quantile(dataSet$int_memory , 0.25)
thirdQuantile <- quantile(dataSet$int_memory, 0.75)
int_memoryIQR <- dataSet %>% filter(dataSet$int_memory > firstQuantile & dataSet$int_memory < thirdQuantile)
#ram IQR
firstQuantile <- quantile(dataSet$ram , 0.25)
thirdQuantile <- quantile(dataSet$ram, 0.75)
ramIQR <- dataSet %>% filter(dataSet$ram > firstQuantile & dataSet$ram < thirdQuantile)
p2 <- ggplot(ramIQR, aes(x=price_range, y = ram, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR RAM vs Price Range")
p3 <- ggplot(int_memoryIQR, aes(x=price_range, y = int_memory, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR int memory vs Price Range")
p4 <- ggplot(battery_powerIQR, aes(x=price_range, y = battery_power, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR battery power vs Price Range")
grid.arrange(p2, p3, p4,nrow = 1)
fig(24, 20)
install.packages("tidyverse")
install.packages("pacman")
install.packages("dplyr")
install.packages("plotly")
library(tidyverse)
fig <- function(width, heigth){
options(repr.plot.width = width, repr.plot.height = heigth)
}
library(pacman)
pacman::p_load(pacman,dplyr, ggplot2, rio, gridExtra, scales, ggcorrplot, caret, e1071)
dataSet <- read.csv('data/train.csv')
names(dataSet)
dim(dataSet)
class(dataSet)
head(dataSet)
sapply(dataSet, class)
summary(dataSet)
library(ggcorrplot)
corr <- round(cor(dataSet), 8)
ggcorrplot(corr)
fig(18, 16)
str(dataSet)
prop.table(table(dataSet$blue)) # cell percentages
prop.table(table(dataSet$dual_sim)) # cell percentages
prop.table(table(dataSet$four_g)) # cell percentages
prop.table(table(dataSet$three_g)) # cell percentages
prop.table(table(dataSet$touch_screen)) # cell percentages
prop.table(table(dataSet$wifi)) # cell percentages
library(ggplot2)
data = data.frame(Dimensions_in_cm = c(dataSet$sc_h, dataSet$sc_w),
Screen = rep(c("Height", "Width"), c(length(dataSet$sc_h), length(dataSet$sc_w))))
ggplot(data, aes(Dimensions_in_cm, fill = Screen)) +
geom_bar(position = 'identity', alpha = .6)
library(ggplot2)
library(gridExtra)
dataSet$price_range <- as.factor(dataSet$price_range)
p1 <-  ggplot(dataSet, aes(x=px_width, y = px_height, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "Pixel Resolution Height vs Pixel Resolution Width")
p2 <- ggplot(dataSet, aes(x=price_range, y = ram, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "RAM vs Price Range")
grid.arrange(p1, p2,nrow = 1)
fig(24, 20)
library(ggplot2)
library(gridExtra)
dataSet$price_range <- as.factor(dataSet$price_range)
p3 <- ggplot(dataSet, aes(x=price_range, y = int_memory, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "int_memory vs Price Range")
p4 <- ggplot(dataSet, aes(x=price_range, y = battery_power, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "Battery power vs Price Range")
grid.arrange(p3, p4,nrow = 1)
fig(24, 20)
install.packages("tidyverse")
library(ggplot2)
install.packages("pacman")
install.packages("dplyr")
install.packages("plotly")
p <- ggplot(dataSet, aes(battery_power, ram, color = price_range))+
geom_point()
p + stat_ellipse()
p <- ggplot(dataSet, aes(int_memory, ram, color = price_range))+
geom_point()
p + stat_ellipse()
p <- ggplot(dataSet, aes(x = ram, y = ram, color = price_range))+
geom_point()
p + stat_ellipse()
p <- ggplot(dataSet, aes(x = clock_speed, y = n_cores, color = price_range))+
geom_point()
p
library(tidyverse)
library(plotly)
# Creating the graphic
p <- plot_ly(
dataSet, x = dataSet$battery_power, y = dataSet$ram, z = dataSet$int_memory,
color = dataSet$price_range) %>%
add_markers(size=1) %>%
layout(
scene = list(xaxis = list(title = 'Battery Power'),
yaxis = list(title = 'Ram'),
zaxis = list(title = 'Memoire interne'))
)
p
library(dplyr)
library(ggplot2)
library(gridExtra)
#Battery_power IQR
firstQuantile <- quantile(dataSet$battery_power, 0.25)
thirdQuantile <- quantile(dataSet$battery_power, 0.75)
battery_powerIQR <- dataSet %>% filter(dataSet$battery_power > firstQuantile & dataSet$battery_power < thirdQuantile)
#Int Memory IQR
firstQuantile <- quantile(dataSet$int_memory , 0.25)
thirdQuantile <- quantile(dataSet$int_memory, 0.75)
int_memoryIQR <- dataSet %>% filter(dataSet$int_memory > firstQuantile & dataSet$int_memory < thirdQuantile)
#ram IQR
firstQuantile <- quantile(dataSet$ram , 0.25)
thirdQuantile <- quantile(dataSet$ram, 0.75)
ramIQR <- dataSet %>% filter(dataSet$ram > firstQuantile & dataSet$ram < thirdQuantile)
p2 <- ggplot(ramIQR, aes(x=price_range, y = ram, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR RAM vs Price Range")
p3 <- ggplot(int_memoryIQR, aes(x=price_range, y = int_memory, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR int memory vs Price Range")
p4 <- ggplot(battery_powerIQR, aes(x=price_range, y = battery_power, color=price_range)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4) +
labs(title = "IQR battery power vs Price Range")
grid.arrange(p2, p3, p4,nrow = 1)
fig(24, 20)
install.packages("dplyr")
install.packages("plotly")
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000) - 1))
rslt
}
checking <- function(expected, found){
if (expected = found) rslt <- 1 else rslt <- 0
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000) - 1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000) - 1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
results<-append(x, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000) - 1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
results
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000) - 1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
simpleLinearRegression(ramList[i])
priceList[i]
checking(priceList[i], simpleLinearRegression(ramList[i]))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
results
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
simpleLinearRegression(ramList[i])
priceList[i]
checking(priceList[i], simpleLinearRegression(ramList[i]))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
results
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
simpleLinearRegression(ramList[i])
priceList[i]
checking(priceList[i], simpleLinearRegression(ramList[i]))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
simpleLinearRegression(ramList[i])
priceList[i]
checking(priceList[i], simpleLinearRegression(ramList[i]))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)))
print(rslt)
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
simpleLinearRegression(ramList[i])
priceList[i]
checking(priceList[i], simpleLinearRegression(ramList[i]))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)-1))
print(rslt)
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
simpleLinearRegression(ramList[i])
priceList[i]
checking(priceList[i], simpleLinearRegression(ramList[i]))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)-1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
print("Resultat regression " + simpleLinearRegression(ramList[i]))
print("Expected " + priceList[i])
print("Checking " + checking(priceList[i], simpleLinearRegression(ramList[i])))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)-1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
print("Resultat regression ", simpleLinearRegression(ramList[i]))
print("Expected " + priceList[i])
print("Checking " + checking(priceList[i], simpleLinearRegression(ramList[i])))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)-1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
print("Resultat regression ", simpleLinearRegression(ramList[i]))
print("Expected ", priceList[i])
print("Checking ", checking(priceList[i], simpleLinearRegression(ramList[i])))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)-1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
print(simpleLinearRegression(ramList[i]))
print(priceList[i])
print(checking(priceList[i], simpleLinearRegression(ramList[i])))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)-1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
print("NewOne")
print(simpleLinearRegression(ramList[i]))
print(priceList[i])
print(checking(priceList[i], simpleLinearRegression(ramList[i])))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
simpleLinearRegression <- function(x){
rslt <- abs(ceiling((x/1000)-1))
rslt
}
checking <- function(expected, found){
if (expected == found) rslt <- 1 else rslt <- 0
rslt
}
priceList = c(dataSet$price_range)
ramList = c(dataSet$ram)
results = c()
for(i in 1:length(priceList)){
print("NewOne")
print(ramList[i])
print(simpleLinearRegression(ramList[i]))
print(priceList[i])
print(checking(priceList[i], simpleLinearRegression(ramList[i])))
results<-append(results, checking(priceList[i], simpleLinearRegression(ramList[i])))
}
mean(results)
df <- data.frame(
group = c(0, 1, 2, 3),
value = c(sum(dataSet$price_range==0), sum(dataSet$price_range==1), sum(dataSet$price_range==2), sum(dataSet$price_range==3))
)
bp<- ggplot(df, aes(x="", y=value, fill=group))+
geom_bar(width = 1, stat = "identity")
bp
pie <- bp + coord_polar("y", start=0)
pie
fig(18, 16)
